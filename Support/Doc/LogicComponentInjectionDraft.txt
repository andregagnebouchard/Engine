class BallLogicComponent : IComponent
{
	public:
	// IComponent
	void Init();
	void Shutdown();
	void Update(float dt);
	string GetName();
}

BallLogicComponent::Init()
{
	Messager::Attach(m_MsgQueue.GetCallback(), Event::Id::ON_COLLISION);
}

BallLogicComponent::Update(float dt)
{
	while(!m_MsgQueue.GetQueue().empty())
	{
		Event ev = m_MsgQueue.GetQueue().front();
		m_MsgQueue.GetQueue().pop();
		switch(ev.GetId())
		{
			case Event::Id::Collision:
			{
				string entityName = event.collision.GetEntityName();
				if(entityName == "Paddle")

				break;
			}
		}
	}
		
}
===========================================================================
class BallPhysicComponent : IComponent
{
	public:
	// IComponent
	void Init();
	void Shutdown();
	void Update(float dt);
	string GetName();
}

BallPhysicComponent::Init()
{
	Messager::Attach(m_MsgQueue.GetCallback(), Event::Id::ON_COLLISION);
}

BallPhysicComponent::Update(float dt)
{
	while(!m_MsgQueue.GetQueue().empty())
	{
		Event ev = m_MsgQueue.GetQueue().front();
		m_MsgQueue.GetQueue().pop();
		switch(ev.GetId())
		{
			case Event::Id::Collision:
			{
				auto collidable = event.collision.GetCollidable();
				vec2 dir = collidable.GetDirection();
				int mass = collidable.GetMass();
				
				break;
			}
		}
	}
		
}
===========================================================================
ComponentMap.xml
	<Actor Name="Ball">
		<Component Name="BallLogicComponent">
		<Component Name="BallPhysicComponent">
	</Actor>
===========================================================================
void main()
{
	IActorFactory::Init("ActorComponentMap.xml");
	IComponentFactory::Add(make_shared<BallLogicComponent>());
}