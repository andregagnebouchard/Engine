===========================
Notes :
- SystemInput will keep track of the pressed state of all the inputs and will fire events when the state changes
- PhysicComponent and RenderComponent will share the TransformComponent
- All "RENDER_SPRITE" event will have a layer value and the sprite ID
- The LogicComponent must change state only once per frame, at the end of its processing
- For Networking in LockStep, we will send the output events of the "ComponentInput"
- The "COLLISION" event must specify both objects that collided
- The "SystemLogic" is responsible to create and delete entities
- The entityId will be set on Box2d::Body::SetUserData
- SystemPhysic implémente les collisions callback de Box2d. Il les buffer tous. Après World.step(), il throw 2 events. Collision of bar with ball && Collision of ball with bar.
- SystemNetwork tire des évènements de synchronisations "RESYNC" appliqués par SystemSimulation.
- SystemSimulation se charge de la création/deletion d'entity et du repositionnement après la réponse du serveur. Il connait tous et bypass l'ordre
- Les AI vont être des process. Tu peux chainer les process
- Les systèmes peuvent être disablés(Pause disable rendering & logic)
- Les évènements audio vont préciser le temps auquel commencer et s'ils doivent looper.
- Déclare tes id dans un .h en static et définit les dans un .cpp au même nom
===========================
GameState
- FrameCount
- All the entity alive
- All the transform components
- All the entity states (Hp, Level). ComponentLogic::SetState()
- All the processes states
===========================
OnPause
- SystemSimulation listens to "OnPause" event
- 

===========================
Loop
MainLoop
SystemNetwork
SystemSimulation
SystemInput
SystemLogic
SystemPhysic
SystemRender
SystemAudio
===========================
Preinit :
- ComponentInput subscribes to "W_KEY_PRESSED" of ComponentMessageManager
- ComponentInput subscribes to "W_KEY_RELEASED" of ComponentMessageManager
- ComponentLogic subscribes to "START_MOVE_FORWARD" of the EntityId of ComponentMessageManager
- ComponentLogic start in state "Idle"
- ComponentPhysic subscribes to "MOVE_COMMAND" of the EntityId of ComponentMessageManager
- ComponentLogic subscribes to "MOVED_ACTION"
- ComponentRender subscribes to "MOVED_ACTION"
- ComponentAudio subscribes to "MOVED_ACTION"
- ComponentRenderer subscribes to "STATE_CHANGE"
- ComponentRenderer subscribes to "COLLISION"
- ComponentAudio subscribes to "COLLISION"
- SystemRender subscribes to "RENDER_SPRITE"
- SystemSimulation subscribes to "PAUSE_KEY_PRESSED"
- SystemSimulation subscribes to "CREATE_ENTITY"
- SystemSimulation subscribes to "DELETE_ENTITY"
- SystemSimulation subscribes to "RESYNC"
- SystemSimulation subscribes to "REWIND"
- All the component but the input register to the "NEXT_FRAME" event(Should have an object for this)
===========================
Frame #0 : User press W key. User is not facing a wall
Initialisation
- CreatePlayMusicProcess

SystemEntity.Update()
- Nothing

SystemInput.Update() : 
- Register the "W" key pressed
- Callback everything subscribed to the "W_KEY_PRESSED"
- Update all input components

InputComponentUpdate :
- Fetch "W_KEY_PRESSED" in its buffer
- "W_KEY_PRESSED" key is translated into "START_MOVE_FORWARD"
- Push "INPUT_MOVE_FORWARD" with the EntityId into the ComponentMessagesManager

SystemLogic.Update()
- SystemLogic::Create/Delete entities
- Update all Processes
- Update PhysicSystem
- Update all PhysicComponents
- Update all LogicComponent

Process
- Send "PLAY_MUSIC" event

PhysicSystem.Update()
- World.Step()
- Push translated collision events

PhysicComponents.Update()
- TransformComponent->SetX(body->GetPosition()->GetX());
- TransformComponent->SetY(body->GetPosition()->GetY());
- TransformComponent->SetAngle(body->GetPosition()->GetAngle())

LogicComponent
- Fetch "START_MOVE_FORWARD" in its buffer
- Since it is in Idle state, create a new process "MOVING_PROCESS" and push it to the SystemLogic


RenderSystem
- Update all RenderComponent
- Render

RenderComponent
- Position = TransformComponent->GetX() + TransformComponent->GetY()
- Angle = TransformComponent->GetAngle()
- Send "RENDER_SPRITE" event with transform position and angle

AudioSystem
- Fetch "PLAY_MUSIC" event
- Start playing the music

GameLoop
- Push "NEXT_FRAME"
- All components subscribes to the event swap their event buffer
================Frame #1================
SystemEntity.Update()
- Nothing

SystemInput.Update()
- Register and callback nothing

ComponentInput
- Nothing

SystemLogic.Update()
- SystemLogic::Create/Delete entities
- Update all Processes
- Update PhysicSystem
- Update all PhysicComponents
- Update all LogicComponent

MoveProcess
- Send "MOVE_COMMAND" event

PhysicComponent
- Fetch "MOVE_COMMAND" event
- Get its position with "TransformComponent"
- Get its velocity with "VelocityComponent"
- Calculate its new position
- Check collision between current and new position. There are no collision
- Update the TransformComponent
- Send "MOVED_ACTION" event

LogicComponent
- Fetch "MOVED_ACTION" event
- Send "STATE_CHANGED" event from "Idle" to "Moving"

 RenderSystem
- Update all RenderComponent
- Render

RenderComponent
- "STATE_CHANGED" event from "Idle" to "Moving"
- Get the tileset corresponding to the state with a map
- Push "RENDER_SPRITE"
============Frame #2===============
SystemInput.Update()
- Nothing

ComponentInput
- Nothing

SystemLogic.Update()
- SystemLogic::Create/Delete entities
- Update all Processes
- Update all PhysicComponents
- Update all LogicComponent

MoveProcess sends "MOVE_COMMAND"

PhysicComponents
- Fetch "MOVE_COMMAND" event
- Get its position with "TransformComponent"
- Get its velocity with "VelocityComponent"
- Calculate its new position
- Check collision between current and new position. There is a collision
- Update the transform component to be next to the wall
- Send "COLLISION" event

LogicComponent
- Fetch "COLLISION" event
- Change state to "COLLIDED"
- Push "COLLISION" event
- Take 10 damage and die
- Push "STATE_CHANGED" event

RenderSystem
- Update all RenderComponent
- Render

RenderComponent
- Fetch "STATE_CHANGED" event
- Update its tileset to the "Collided" one
- Push "RENDER_SPRITE"
- 
- Fetch "COLLISION" event
- Send "CREATE_ENTITY" with "ENTITYID_EXPLOSION" and a "POSITION" "ANGLE"